/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
import syntaxtree.*;
import visitor.*;
public class MiniJavaParser implements MiniJavaParserConstants {

  static final public Program Goal() throws ParseException {
  MainClass mc;
  ClassDecl cd;
  ClassDeclList cdl = new ClassDeclList();
    mc = MainClass();
    label_1:
    while (true) {
      if (jj_2_1(5)) {
        ;
      } else {
        break label_1;
      }
      cd = ClassDeclaration();
                                             cdl.addElement(cd);
    }
    jj_consume_token(0);
   {if (true) return new Program(mc, cdl);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
        Identifier i1, i2;
        Statement s;
    jj_consume_token(CLASS);
    i1 = Identifier();
    jj_consume_token(LCURL);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    i2 = Identifier();
    jj_consume_token(RPAR);
    jj_consume_token(LCURL);
    s = Stm();
    jj_consume_token(RCURL);
    jj_consume_token(RCURL);
   {if (true) return new MainClass(i1,i2,s);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclaration() throws ParseException {
        Identifier i1,i2;
        VarDecl vd;
        MethodDecl md;
        VarDeclList vdl = new VarDeclList();
        MethodDeclList mdl = new MethodDeclList();
    if (jj_2_6(5)) {
      jj_consume_token(CLASS);
      i1 = Identifier();
      jj_consume_token(EXTENDS);
      i2 = Identifier();
      jj_consume_token(LCURL);
      label_2:
      while (true) {
        if (jj_2_2(5)) {
          ;
        } else {
          break label_2;
        }
        vd = VarDeclaration();
                                                                                       vdl.addElement(vd);
      }
      label_3:
      while (true) {
        if (jj_2_3(5)) {
          ;
        } else {
          break label_3;
        }
        md = MethodDeclaration();
                                                                                                                                        mdl.addElement(md);
      }
      jj_consume_token(RCURL);
   {if (true) return new ClassDeclExtends(i1,i2,vdl,mdl);}
    } else if (jj_2_7(5)) {
      jj_consume_token(CLASS);
      i1 = Identifier();
      jj_consume_token(LCURL);
      label_4:
      while (true) {
        if (jj_2_4(5)) {
          ;
        } else {
          break label_4;
        }
        vd = VarDeclaration();
                                                             vdl.addElement(vd);
      }
      label_5:
      while (true) {
        if (jj_2_5(5)) {
          ;
        } else {
          break label_5;
        }
        md = MethodDeclaration();
                                                                                                               mdl.addElement(md);
      }
      jj_consume_token(RCURL);
   {if (true) return new ClassDeclSimple(i1,vdl,mdl);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDeclaration() throws ParseException {
        Identifier i;
        Type t;
    t = Type();
    i = Identifier();
    jj_consume_token(SEMICOLON);
   {if (true) return new VarDecl(t,i);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
  Formal f;
  Type t, t1;
  VarDecl vd;
  Statement s;
  Identifier i, i1;
  FormalList fl = new FormalList();
  VarDeclList vdl = new VarDeclList();
  StatementList sl = new StatementList();
  Exp e;
    jj_consume_token(PUBLIC);
    t = Type();
    i = Identifier();
    jj_consume_token(LPAR);
    if (jj_2_13(5)) {
      jj_consume_token(RPAR);
      jj_consume_token(LCURL);
      label_6:
      while (true) {
        if (jj_2_8(5)) {
          ;
        } else {
          break label_6;
        }
        vd = VarDeclaration();
                                          vdl.addElement(vd);
      }
      label_7:
      while (true) {
        if (jj_2_9(5)) {
          ;
        } else {
          break label_7;
        }
        s = Stm();
                                                                             sl.addElement(s);
      }
      jj_consume_token(RETURN);
      e = Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(RCURL);
   {if (true) return new MethodDecl(t, i, fl, vdl, sl, e);}
    } else if (jj_2_14(5)) {
      t1 = Type();
      i1 = Identifier();
                                   f = new Formal(t1, i1);
                                                             fl.addElement(f);
      label_8:
      while (true) {
        if (jj_2_10(5)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        t1 = Type();
        i1 = Identifier();
                                                                                                                        f = new Formal(t1, i1);
                                                                                                                                                  fl.addElement(f);
      }
      jj_consume_token(RPAR);
      jj_consume_token(LCURL);
      label_9:
      while (true) {
        if (jj_2_11(5)) {
          ;
        } else {
          break label_9;
        }
        vd = VarDeclaration();
                                                                                                                                                                                                              vdl.addElement(vd);
      }
      label_10:
      while (true) {
        if (jj_2_12(5)) {
          ;
        } else {
          break label_10;
        }
        s = Stm();
                                                                                                                                                                                                                                                 sl.addElement(s);
      }
      jj_consume_token(RETURN);
      e = Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(RCURL);
   {if (true) return new MethodDecl(t, i, fl, vdl, sl, e);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
        Identifier i;
    if (jj_2_15(5)) {
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
   {if (true) return new IntArrayType();}
    } else if (jj_2_16(5)) {
      jj_consume_token(BOOLEAN);
   {if (true) return new BooleanType();}
    } else if (jj_2_17(5)) {
      jj_consume_token(INT);
   {if (true) return new IntegerType();}
    } else if (jj_2_18(5)) {
      i = Identifier();
   {if (true) return new IdentifierType(i.toString());}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Stm() throws ParseException {
  StatementList sl = new StatementList();
  Statement s1, s2;
  Identifier i ;
  Exp e1, e2;
    if (jj_2_20(5)) {
      jj_consume_token(LCURL);
      label_11:
      while (true) {
        if (jj_2_19(5)) {
          ;
        } else {
          break label_11;
        }
        s1 = Stm();
                       sl.addElement(s1);
      }
      jj_consume_token(RCURL);
     {if (true) return new Block(sl);}
    } else if (jj_2_21(5)) {
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      s1 = Stm();
      jj_consume_token(ELSE);
      s2 = Stm();
     {if (true) return new If(e1, s1, s2);}
    } else if (jj_2_22(5)) {
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      s1 = Stm();
     {if (true) return new While(e1, s1);}
    } else if (jj_2_23(5)) {
      jj_consume_token(SYSOUT);
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      jj_consume_token(SEMICOLON);
     {if (true) return new Print(e1);}
    } else if (jj_2_24(5)) {
      i = Identifier();
      jj_consume_token(ASSIGN);
      e1 = Expression();
      jj_consume_token(SEMICOLON);
     {if (true) return new Assign(i, e1);}
    } else if (jj_2_25(5)) {
      i = Identifier();
      jj_consume_token(LBRACKET);
      e1 = Expression();
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      e2 = Expression();
      jj_consume_token(SEMICOLON);
     {if (true) return new ArrayAssign(i, e1, e2);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expression() throws ParseException {
  Exp e, e1, e2;
  Token t;
  Identifier i;
    if (jj_2_26(5)) {
      t = jj_consume_token(INTEGER_LITERAL);
                         e1 = new IntegerLiteral(Integer.parseInt(t.toString()));
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_27(5)) {
      jj_consume_token(TRUE);
          e1 = new True();
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_28(5)) {
      jj_consume_token(FALSE);
           e1 = new False();
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_29(5)) {
      i = Identifier();
                    e1 = new IdentifierExp(i.toString());
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_30(5)) {
      jj_consume_token(THIS);
          e1 = new This();
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_31(5)) {
      jj_consume_token(NEW);
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      e = Expression();
                                           e1 = new NewArray(e);
      jj_consume_token(RBRACKET);
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_32(5)) {
      jj_consume_token(NEW);
      i = Identifier();
                          e1 = new NewObject(i);
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_33(5)) {
      jj_consume_token(EXCLAMATION);
      e = Expression();
                                  e1 = new Not(e);
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else if (jj_2_34(5)) {
      jj_consume_token(LPAR);
      e1 = Expression();
      jj_consume_token(RPAR);
      e2 = Expressionprime(e1);
   {if (true) return e2;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expressionprime(Exp e) throws ParseException {
  Identifier i;
  Exp ef, ef1, e1, e2;
  ExpList el = new ExpList();
    if (jj_2_44(5)) {
      if (jj_2_35(5)) {
        jj_consume_token(AND);
        e1 = Expression();
                             ef = new And(e, e1);
        ef1 = Expressionprime(ef);
     {if (true) return ef1;}
      } else if (jj_2_36(5)) {
        jj_consume_token(LESS_THAN);
        e1 = Expression();
                                     ef = new LessThan(e, e1);
        ef1 = Expressionprime(ef);
     {if (true) return ef1;}
      } else if (jj_2_37(5)) {
        jj_consume_token(PLUS);
        e1 = Expression();
                                ef = new Plus(e, e1);
        ef1 = Expressionprime(ef);
     {if (true) return ef1;}
      } else if (jj_2_38(5)) {
        jj_consume_token(MINUS);
        e1 = Expression();
                                 ef = new Minus(e, e1);
        ef1 = Expressionprime(ef);
     {if (true) return ef1;}
      } else if (jj_2_39(5)) {
        jj_consume_token(STAR);
        e1 = Expression();
                                ef = new Times(e, e1);
        ef1 = Expressionprime(ef);
     {if (true) return ef1;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_45(5)) {
      jj_consume_token(LBRACKET);
      e1 = Expression();
      jj_consume_token(RBRACKET);
                                             ef = new ArrayLookup(e, e1);
      ef1 = Expressionprime(ef);
     {if (true) return ef1;}
    } else if (jj_2_46(5)) {
      jj_consume_token(DOT);
      jj_consume_token(LENGTH);
                    e1 = new ArrayLength(e);
      ef1 = Expressionprime(e1);
     {if (true) return ef1;}
    } else if (jj_2_47(5)) {
      if (jj_2_42(5)) {
        jj_consume_token(DOT);
        i = Identifier();
        jj_consume_token(LPAR);
        if (jj_2_41(5)) {
          e1 = Expression();
                                                      el.addElement(e1);
          label_12:
          while (true) {
            if (jj_2_40(5)) {
              ;
            } else {
              break label_12;
            }
            jj_consume_token(COMMA);
            e2 = Expression();
                                                                                                      el.addElement(e2);
          }
        } else {
          ;
        }
        jj_consume_token(RPAR);
                                                                                                                                      e1 = new Call(e, i, el);
        ef = Expressionprime(e1);
     {if (true) return ef;}
      } else if (jj_2_43(5)) {
        jj_consume_token(DOT);
        i = Identifier();
        jj_consume_token(LPAR);
        jj_consume_token(RPAR);
                                           e1 = new Call(e, i, el);
        ef1 = Expressionprime(e1);
     {if (true) return ef1;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
     {if (true) return e;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
   {if (true) return new Identifier(t.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public Token Token() throws ParseException {
  Token t;
    if (jj_2_48(5)) {
      t = jj_consume_token(LPAR);
   {if (true) return t;}
    } else if (jj_2_49(5)) {
      t = jj_consume_token(RPAR);
   {if (true) return t;}
    } else if (jj_2_50(5)) {
      t = jj_consume_token(EXCLAMATION);
   {if (true) return t;}
    } else if (jj_2_51(5)) {
      t = jj_consume_token(NEW);
   {if (true) return t;}
    } else if (jj_2_52(5)) {
      t = jj_consume_token(INT);
   {if (true) return t;}
    } else if (jj_2_53(5)) {
      t = jj_consume_token(LBRACKET);
   {if (true) return t;}
    } else if (jj_2_54(5)) {
      t = jj_consume_token(RBRACKET);
   {if (true) return t;}
    } else if (jj_2_55(5)) {
      t = jj_consume_token(THIS);
   {if (true) return t;}
    } else if (jj_2_56(5)) {
      t = jj_consume_token(FALSE);
   {if (true) return t;}
    } else if (jj_2_57(5)) {
      t = jj_consume_token(TRUE);
   {if (true) return t;}
    } else if (jj_2_58(5)) {
      t = jj_consume_token(INTEGER_LITERAL);
   {if (true) return t;}
    } else if (jj_2_59(5)) {
      t = jj_consume_token(DOT);
   {if (true) return t;}
    } else if (jj_2_60(5)) {
      t = jj_consume_token(COMMA);
   {if (true) return t;}
    } else if (jj_2_61(5)) {
      t = jj_consume_token(LENGTH);
   {if (true) return t;}
    } else if (jj_2_62(5)) {
      t = jj_consume_token(AND);
   {if (true) return t;}
    } else if (jj_2_63(5)) {
      t = jj_consume_token(LESS_THAN);
   {if (true) return t;}
    } else if (jj_2_64(5)) {
      t = jj_consume_token(PLUS);
   {if (true) return t;}
    } else if (jj_2_65(5)) {
      t = jj_consume_token(MINUS);
   {if (true) return t;}
    } else if (jj_2_66(5)) {
      t = jj_consume_token(LCURL);
   {if (true) return t;}
    } else if (jj_2_67(5)) {
      t = jj_consume_token(RCURL);
   {if (true) return t;}
    } else if (jj_2_68(5)) {
      t = jj_consume_token(STAR);
   {if (true) return t;}
    } else if (jj_2_69(5)) {
      t = jj_consume_token(RETURN);
   {if (true) return t;}
    } else if (jj_2_70(5)) {
      t = jj_consume_token(SEMICOLON);
   {if (true) return t;}
    } else if (jj_2_71(5)) {
      t = jj_consume_token(IF);
   {if (true) return t;}
    } else if (jj_2_72(5)) {
      t = jj_consume_token(ELSE);
   {if (true) return t;}
    } else if (jj_2_73(5)) {
      t = jj_consume_token(WHILE);
   {if (true) return t;}
    } else if (jj_2_74(5)) {
      t = jj_consume_token(SYSOUT);
   {if (true) return t;}
    } else if (jj_2_75(5)) {
      t = jj_consume_token(ASSIGN);
   {if (true) return t;}
    } else if (jj_2_76(5)) {
      t = jj_consume_token(BOOLEAN);
   {if (true) return t;}
    } else if (jj_2_77(5)) {
      t = jj_consume_token(PUBLIC);
   {if (true) return t;}
    } else if (jj_2_78(5)) {
      t = jj_consume_token(CLASS);
   {if (true) return t;}
    } else if (jj_2_79(5)) {
      t = jj_consume_token(EXTENDS);
   {if (true) return t;}
    } else if (jj_2_80(5)) {
      t = jj_consume_token(STATIC);
   {if (true) return t;}
    } else if (jj_2_81(5)) {
      t = jj_consume_token(VOID);
   {if (true) return t;}
    } else if (jj_2_82(5)) {
      t = jj_consume_token(MAIN);
   {if (true) return t;}
    } else if (jj_2_83(5)) {
      t = jj_consume_token(STRING);
   {if (true) return t;}
    } else if (jj_2_84(5)) {
      t = jj_consume_token(IDENTIFIER);
   {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_3_25() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(SYSOUT)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(LCURL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURL)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_18()) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    if (jj_scan_token(LCURL)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(RPAR)) return true;
    if (jj_scan_token(LCURL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_84() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_83() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_scan_token(MAIN)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_81() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_scan_token(EXTENDS)) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_scan_token(SYSOUT)) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LCURL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURL)) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LCURL)) return true;
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_scan_token(RCURL)) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(LCURL)) return true;
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(EXCLAMATION)) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(EXCLAMATION)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(RPAR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_16()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(FALSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(TRUE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[84];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 84; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                             }
